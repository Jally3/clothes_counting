import 'package:flutter/material.dart';
import '../models/product_model.dart'; // Assuming ProductType is here
import '../models/production_record_model.dart';
import '../services/database_service.dart'; // Import DatabaseService

class ProductionRecordScreen extends StatefulWidget {
  const ProductionRecordScreen({super.key});

  @override
  State<ProductionRecordScreen> createState() => _ProductionRecordScreenState();
}

class _ProductionRecordScreenState extends State<ProductionRecordScreen> {
  final _formKey = GlobalKey<FormState>();
  ProductType _selectedProductType = ProductType.values.first;
  final _productCodeController = TextEditingController();
  final _styleController = TextEditingController();
  final _quantityController = TextEditingController();

  // Instantiate DatabaseService
  final DatabaseService _dbService = DatabaseService.instance;

  @override
  void dispose() {
    _productCodeController.dispose();
    _styleController.dispose();
    _quantityController.dispose();
    super.dispose();
  }

  Future<void> _saveRecord() async {
    if (_formKey.currentState!.validate()) {
      // First, find or create the product
      Product? product = await _dbService.getProductByCode(_productCodeController.text);
      if (product == null) {
        product = Product(
          type: _selectedProductType,
          styleCode: _styleController.text,
        );
        product = await _dbService.createProduct(product);
      }

      final record = ProductionRecord(
        // id will be auto-generated by the database
        productId: product.id!, // Use the id from the saved/found product
        date: DateTime.now(),
        quantity: int.parse(_quantityController.text), productType: _selectedProductType,
        productStyleCode: _styleController.text,
      );

      try {
        await _dbService.createProductionRecord(record);
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Production record saved successfully!')),
        );
        // Optionally, navigate back or clear the form
        Navigator.pop(context); // Go back to the previous screen
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to save record: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Record Production'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: <Widget>[
              DropdownButtonFormField<ProductType>(
                value: _selectedProductType,
                decoration: const InputDecoration(labelText: 'Product Type'),
                items: ProductType.values.map((ProductType type) {
                  return DropdownMenuItem<ProductType>(
                    value: type,
                    child: Text(type.toString().split('.').last),
                  );
                }).toList(),
                onChanged: (ProductType? newValue) {
                  setState(() {
                    _selectedProductType = newValue!;
                  });
                },
                validator: (value) => value == null ? 'Please select a product type' : null,
              ),
              TextFormField(
                controller: _productCodeController,
                decoration: const InputDecoration(labelText: 'Product Code/ID'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter product code/ID';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _styleController,
                decoration: const InputDecoration(labelText: 'Style (Optional)'),
                // No validator needed as it's optional, or add one if specific rules apply
              ),
              TextFormField(
                controller: _quantityController,
                decoration: const InputDecoration(labelText: 'Quantity Completed'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter quantity';
                  }
                  if (int.tryParse(value) == null || int.parse(value) <= 0) {
                    return 'Please enter a valid positive number';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _saveRecord, // Updated to call the new _saveRecord
                child: const Text('Save Record'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
